# LLMO診断サイト - 会員登録機能要件定義書
# Version: 1.0.0
# Last Updated: 2025-06-03

metadata:
  title: "LLMO診断サイト会員登録機能"
  version: "1.0.0"
  created_at: "2025-06-03"
  author: "Claude AI"
  project: "llmo_check"
  description: "会員登録機能により、非会員は伏字、会員は全結果を表示する機能"

# =============================================================================
# 🎯 機能概要
# =============================================================================
overview:
  purpose: "診断結果の表示制御による会員登録促進"
  target_users:
    - "診断ツールを利用する一般ユーザー"
    - "詳細な分析結果を求めるWebサイト運営者"
    - "継続的に診断を利用する企業・個人"
  
  core_benefits:
    - "無料ユーザーは評価結果のみ、会員は全詳細を取得"
    - "簡単なメール認証による会員登録"
    - "既存の匿名診断機能との完全な後方互換性"

# =============================================================================
# 🏗️ 機能仕様
# =============================================================================
functional_requirements:
  
  # ---------------------------------------------------------------------------
  # ユーザー管理機能
  # ---------------------------------------------------------------------------
  user_management:
    registration:
      description: "メールアドレスベースの会員登録"
      fields:
        - field: "email"
          type: "string"
          required: true
          validation: "email format"
          description: "メールアドレス（ログインID）"
        - field: "password"
          type: "string"
          required: true
          validation: "min 8 chars, alphanumeric"
          description: "パスワード（8文字以上）"
        - field: "display_name"
          type: "string"
          required: false
          validation: "max 50 chars"
          description: "表示名（オプション）"
      
      process:
        - "メールアドレス・パスワード入力"
        - "メール認証リンク送信"
        - "認証リンククリックで本登録完了"
        - "ログイン可能状態へ移行"
    
    login:
      description: "メールアドレス・パスワードによるログイン"
      features:
        - "メールアドレス・パスワード認証"
        - "ログイン状態の永続化（30日間）"
        - "パスワードリセット機能"
        - "ログアウト機能"
    
    profile:
      description: "ユーザープロフィール管理"
      features:
        - "表示名の変更"
        - "パスワード変更"
        - "アカウント削除"

  # ---------------------------------------------------------------------------
  # 診断結果表示制御
  # ---------------------------------------------------------------------------
  content_access_control:
    anonymous_users:
      description: "非会員ユーザーの診断結果表示"
      accessible_content:
        - "エグゼクティブサマリー（評価スコア）"
        - "総合評価（A〜F）"
        - "カテゴリ別評価（SEO、LLMO、パフォーマンス等）"
      
      restricted_content:
        - "詳細な分析内容"
        - "具体的な改善提案"
        - "コード例・実装方法"
        - "競合比較データ"
      
      display_strategy:
        - "制限コンテンツは「●●●●●」で伏字表示"
        - "「詳細を見るには会員登録が必要です」のメッセージ"
        - "会員登録へのCTAボタン表示"
    
    registered_users:
      description: "会員ユーザーの診断結果表示"
      accessible_content:
        - "全ての診断結果（制限なし）"
        - "詳細な分析レポート"
        - "具体的な改善提案"
        - "コード例・実装ガイド"
      
      additional_features:
        - "診断履歴の保存・管理"
        - "お気に入り診断結果の保存"
        - "診断結果のPDFエクスポート（将来機能）"

  # ---------------------------------------------------------------------------
  # UI/UXコンポーネント
  # ---------------------------------------------------------------------------
  user_interface:
    header_navigation:
      anonymous_state:
        - "ログインボタン"
        - "会員登録ボタン"
      
      authenticated_state:
        - "ユーザー名表示"
        - "ダッシュボードリンク"
        - "ログアウトボタン"
    
    modal_components:
      login_modal:
        - "メールアドレス入力"
        - "パスワード入力"
        - "ログインボタン"
        - "会員登録リンク"
        - "パスワードリセットリンク"
      
      registration_modal:
        - "メールアドレス入力"
        - "パスワード入力"
        - "パスワード確認入力"
        - "表示名入力（オプション）"
        - "利用規約同意チェック"
        - "登録ボタン"
    
    diagnosis_result_display:
      anonymous_view:
        - "評価スコア表示エリア"
        - "伏字表示エリア"
        - "会員登録促進バナー"
        - "「詳細を見る」CTAボタン"
      
      member_view:
        - "完全な診断結果表示"
        - "追加機能ボタン（履歴保存等）"

# =============================================================================
# 🗄️ データベース設計
# =============================================================================
database_schema:
  
  # Supabase Auth を使用（auth.users テーブル）
  users_profile:
    table_name: "user_profiles"
    description: "ユーザープロフィール情報"
    columns:
      - name: "id"
        type: "UUID"
        primary_key: true
        description: "Supabase auth.users.id と同期"
      - name: "email"
        type: "TEXT"
        nullable: false
        unique: true
        description: "メールアドレス"
      - name: "display_name"
        type: "TEXT"
        nullable: true
        description: "表示名"
      - name: "created_at"
        type: "TIMESTAMP WITH TIME ZONE"
        default: "NOW()"
        description: "作成日時"
      - name: "updated_at"
        type: "TIMESTAMP WITH TIME ZONE"
        default: "NOW()"
        description: "更新日時"
    
    indexes:
      - "CREATE INDEX idx_user_profiles_email ON user_profiles(email);"
    
    rls_policies:
      - "Users can only view and update their own profile"
  
  diagnosis_history:
    table_name: "diagnosis_history"
    description: "会員の診断履歴"
    columns:
      - name: "id"
        type: "UUID"
        primary_key: true
        default: "gen_random_uuid()"
      - name: "user_id"
        type: "UUID"
        foreign_key: "user_profiles.id"
        nullable: false
        description: "ユーザーID"
      - name: "url"
        type: "TEXT"
        nullable: false
        description: "診断対象URL"
      - name: "diagnosis_result"
        type: "TEXT"
        nullable: false
        description: "診断結果の完全版"
      - name: "is_favorite"
        type: "BOOLEAN"
        default: false
        description: "お気に入りフラグ"
      - name: "created_at"
        type: "TIMESTAMP WITH TIME ZONE"
        default: "NOW()"
        description: "診断実行日時"
    
    indexes:
      - "CREATE INDEX idx_diagnosis_history_user_id ON diagnosis_history(user_id, created_at DESC);"
      - "CREATE INDEX idx_diagnosis_history_url ON diagnosis_history(url);"
    
    rls_policies:
      - "Users can only access their own diagnosis history"

  # 既存テーブルは継続使用
  diagnosis_cache:
    table_name: "diagnosis_cache"
    description: "既存のキャッシュテーブル（変更なし）"
    note: "匿名ユーザー・会員ユーザー共通で使用"

# =============================================================================
# 🔧 技術仕様
# =============================================================================
technical_specifications:
  
  authentication:
    provider: "Supabase Auth"
    features:
      - "メール認証"
      - "パスワードリセット"
      - "セッション管理"
      - "RLS (Row Level Security)"
    
    session_management:
      - "JWT トークンベース認証"
      - "30日間の永続セッション"
      - "自動リフレッシュ機能"
  
  content_filtering:
    strategy: "サーバーサイドフィルタリング"
    implementation:
      - "診断API (`/api/diagnose`) で認証状態チェック"
      - "非会員向けにフィルタリングされた結果を返却"
      - "会員向けに完全な結果を返却"
    
    filtering_rules:
      anonymous_users:
        - "markdown見出し（# ## ###）は表示"
        - "評価スコア・数値は表示"
        - "詳細説明・具体例は「●●●●●」で置換"
        - "改善提案の項目名のみ表示、内容は伏字"
      
      registered_users:
        - "すべてのコンテンツを無制限表示"
  
  api_endpoints:
    new_endpoints:
      - path: "/api/auth/profile"
        method: "GET, PUT"
        description: "ユーザープロフィールの取得・更新"
      
      - path: "/api/diagnosis/history"
        method: "GET, POST, DELETE"
        description: "診断履歴の管理"
      
      - path: "/api/diagnosis/favorites"
        method: "GET, POST, DELETE"
        description: "お気に入り診断の管理"
    
    modified_endpoints:
      - path: "/api/diagnose"
        changes: "認証状態に基づくレスポンス内容の制御"

# =============================================================================
# 🎨 UI/UX設計
# =============================================================================
ui_ux_design:
  
  design_principles:
    - "既存デザインとの完全な一貫性"
    - "会員登録への自然な誘導"
    - "非侵入的な認証フロー"
    - "モバイルファーストレスポンシブデザイン"
  
  color_scheme:
    primary: "#2563eb"    # 既存のプライマリカラー
    secondary: "#059669"  # 既存のセカンダリカラー
    accent: "#dc2626"     # 既存のアクセントカラー
    success: "#10b981"    # 新規：成功状態
    warning: "#f59e0b"    # 新規：警告状態
  
  component_specifications:
    auth_modal:
      dimensions: "max-width: 400px"
      position: "center overlay"
      animation: "fade-in with slide-up"
      backdrop: "semi-transparent blur"
    
    membership_banner:
      placement: "diagnosis result area"
      style: "gradient background with CTA"
      responsiveness: "mobile stacked layout"
    
    user_menu:
      placement: "top-right header"
      style: "dropdown menu"
      items: "profile, history, logout"

# =============================================================================
# 🚀 実装フェーズ
# =============================================================================
implementation_phases:
  
  phase_1:
    name: "認証基盤構築"
    duration: "2-3 days"
    deliverables:
      - "Supabase認証設定"
      - "ユーザープロフィールテーブル作成"
      - "基本的なログイン・登録UI"
      - "認証コンテキストの実装"
  
  phase_2:
    name: "コンテンツフィルタリング"
    duration: "2-3 days"
    deliverables:
      - "診断API の認証チェック実装"
      - "結果フィルタリングロジック"
      - "伏字表示コンポーネント"
      - "会員登録誘導UI"
  
  phase_3:
    name: "履歴管理機能"
    duration: "1-2 days"
    deliverables:
      - "診断履歴テーブル作成"
      - "履歴保存・表示機能"
      - "お気に入り機能"
      - "ダッシュボードページ"
  
  phase_4:
    name: "テスト・最適化"
    duration: "1 day"
    deliverables:
      - "機能テスト"
      - "レスポンシブテスト"
      - "パフォーマンス最適化"
      - "セキュリティチェック"

# =============================================================================
# 🔒 セキュリティ要件
# =============================================================================
security_requirements:
  
  authentication_security:
    - "パスワード強度チェック（8文字以上、英数字混在）"
    - "メール認証必須"
    - "ブルートフォース攻撃対策（レート制限）"
    - "セッション固定攻撃対策"
  
  data_protection:
    - "パスワードのハッシュ化（Supabase標準）"
    - "個人情報の暗号化保存"
    - "RLS（Row Level Security）の徹底"
    - "GDPR準拠のデータ削除機能"
  
  api_security:
    - "JWT トークン検証"
    - "CORS設定の最適化"
    - "CSRFトークン対応"
    - "レート制限の実装"

# =============================================================================
# 📊 成功指標・KPI
# =============================================================================
success_metrics:
  
  user_registration:
    - "会員登録率: 診断実行ユーザーの15%以上"
    - "メール認証完了率: 80%以上"
    - "1週間以内の再訪問率: 40%以上"
  
  content_engagement:
    - "会員の診断実行頻度: 月平均3回以上"
    - "診断履歴保存率: 60%以上"
    - "お気に入り登録率: 30%以上"
  
  technical_performance:
    - "認証処理レスポンス時間: 200ms以内"
    - "フィルタリング処理オーバーヘッド: 50ms以内"
    - "システム可用性: 99.9%以上"

# =============================================================================
# 🔄 今後の拡張計画
# =============================================================================
future_enhancements:
  
  short_term:
    - "ソーシャルログイン（Google、GitHub）"
    - "診断結果のPDFエクスポート"
    - "競合サイト比較機能"
  
  medium_term:
    - "プレミアムプラン（詳細分析、API利用）"
    - "チーム・組織アカウント"
    - "診断結果の共有機能"
  
  long_term:
    - "AIベースのパーソナライズド推奨"
    - "リアルタイム監視・アラート機能"
    - "サードパーティツール連携API"

# =============================================================================
# 📋 チェックリスト
# =============================================================================
implementation_checklist:
  preparation:
    - "[ ] Supabase認証設定の確認"
    - "[ ] 環境変数の設定"
    - "[ ] データベーススキーマの作成"
    - "[ ] 既存コードの影響範囲調査"
  
  development:
    - "[ ] 認証コンテキストの実装"
    - "[ ] ログイン・登録UIコンポーネント"
    - "[ ] 診断APIの認証連携"
    - "[ ] コンテンツフィルタリング機能"
    - "[ ] 履歴管理機能"
    - "[ ] ダッシュボードページ"
  
  testing:
    - "[ ] ユニットテスト"
    - "[ ] 統合テスト"
    - "[ ] セキュリティテスト"
    - "[ ] レスポンシブテスト"
    - "[ ] パフォーマンステスト"
  
  deployment:
    - "[ ] 本番環境設定"
    - "[ ] データベースマイグレーション"
    - "[ ] 監視・ログ設定"
    - "[ ] バックアップ設定"

# =============================================================================
# 📞 連絡先・リソース
# =============================================================================
resources:
  documentation:
    - "Supabase Auth Documentation: https://supabase.com/docs/guides/auth"
    - "Next.js Authentication: https://nextjs.org/docs/authentication"
    - "React Hook Form: https://react-hook-form.com/"
  
  tools:
    - "Supabase Dashboard"
    - "Vercel Analytics"
    - "GitHub Actions (CI/CD)"

---
# End of Requirements Document